{"version":3,"file":"air-hockey.min.js","mappings":"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","sources":["webpack://air-hockey/webpack/universalModuleDefinition","webpack://air-hockey/./src/display-room-key.js","webpack://air-hockey/./src/networking.js","webpack://air-hockey/./src/physx-grab.js","webpack://air-hockey/./src/spawn-balls.js","webpack://air-hockey/./src/spawn-in-circle.js","webpack://air-hockey/webpack/bootstrap","webpack://air-hockey/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","AFRAME.registerComponent('display-room-key', {\r\n\r\n  init() {\r\n    this.el.setAttribute('text', `value: Room Key\\n${ROOM_KEY}; align: center; wrapCount: 10`)\r\n  }\r\n})","AFRAME.registerComponent('networking', {\r\n\r\n  init() {\r\n\r\n    this.el.setAttribute('networked-scene', \r\n                         `serverURL: air-hockey-naf-server.glitch.me;\r\n                          room: ${ROOM_KEY};\r\n                          adapter: wseasyrtc`)\r\n  }\r\n})","(function () {\r\n\r\n  worldPosition = new THREE.Vector3()\r\n  targetWorldPosition = new THREE.Vector3()\r\n\r\n  AFRAME.registerComponent('physx-grab', {\r\n\r\n  schema: {\r\n      target: { type: 'selector' },\r\n\r\n      // how close to target hand must be to grab\r\n      grabProximity: { default: 0.2 },\r\n\r\n      // additional distance tolerated before release\r\n      holdTolerance: { default: 0.1 },\r\n    },\r\n\r\n    init() {\r\n\r\n      // If a state of \"grabbed\" is set on a physx-body entity, \r\n      // the entity is automatically transformed into a kinematic entity.\r\n      // To avoid triggering this (we want to grab using constraints, and leave the\r\n      // body as dynamic), we use a non-clashing name for the state we set on the entity when\r\n      // grabbing it.\r\n      this.GRABBED_STATE = 'grabbed-dynamic';\r\n\r\n      this.grabbing = false\r\n      this.grabTarget = null\r\n      this.physxEl = this.el.querySelector('[physx-body]')\r\n\r\n      // Bind event handlers\r\n      this.onGripOpen = this.onGripOpen.bind(this);\r\n      this.onGripClose = this.onGripClose.bind(this);\r\n\r\n    },\r\n\r\n    play() {\r\n      var el = this.el;\r\n      el.addEventListener('gripdown', this.onGripClose);\r\n      el.addEventListener('gripup', this.onGripOpen);\r\n      el.addEventListener('triggerdown', this.onGripClose);\r\n      el.addEventListener('triggerup', this.onGripOpen);\r\n    },\r\n\r\n    pause() {\r\n      var el = this.el;\r\n      el.removeEventListener('gripdown', this.onGripClose);\r\n      el.removeEventListener('gripup', this.onGripOpen);\r\n      el.removeEventListener('triggerdown', this.onGripClose);\r\n      el.removeEventListener('triggerup', this.onGripOpen);\r\n    },\r\n\r\n    onGripClose: function (evt) {\r\n      this.grabbing = true;\r\n\r\n      // joint will be created on next tick (if within range)\r\n    },\r\n\r\n    onGripOpen: function (evt) {\r\n      \r\n      this.grabbing = false;\r\n      this.removeJoint()\r\n    },\r\n\r\n    addJoint(el, target) {\r\n\r\n      this.removeJoint()\r\n\r\n      this.joint = document.createElement('a-entity') \r\n      this.joint.setAttribute(\"physx-joint\", `type: Fixed; target: #${target.id}`)\r\n\r\n      el.appendChild(this.joint)\r\n    },\r\n\r\n    removeJoint() {\r\n\r\n      if (!this.joint) return\r\n      this.joint.parentElement.removeChild(this.joint)\r\n      this.joint = null\r\n    },\r\n\r\n    tick() {\r\n\r\n      const data = this.data\r\n      const target = data.target\r\n      if (!target) return\r\n\r\n      this.el.object3D.getWorldPosition(worldPosition)\r\n      target.object3D.getWorldPosition(targetWorldPosition)\r\n\r\n      const dist = targetWorldPosition.sub(worldPosition).length()\r\n\r\n      if (dist < data.grabProximity) {\r\n        this.grabTarget = target\r\n\r\n        if (this.grabbing && !this.joint) {\r\n          this.addJoint(this.physxEl, target)\r\n        }\r\n      }\r\n\r\n      else if (dist > (data.grabProximity + data.holdTolerance)) {\r\n\r\n        if (this.grabTarget) {\r\n          this.removeJoint()\r\n          this.grabTarget = null\r\n        }\r\n      }\r\n    }\r\n  })\r\n})()\r\n","AFRAME.registerComponent('spawn-balls', {\r\n  init() {\r\n\r\n    // wait 5 seconds to check for replicated pucks before spawning them in.\r\n    setTimeout(() => {  \r\n      const scene = this.el.sceneEl\r\n\r\n      // no need for balls if they already exist\r\n      if (document.querySelector('[height=\"0.01\"]')) {\r\n        return\r\n      }\r\n\r\n      const html = `<a-cylinder id=\"puck\" position=\"0 1.5 0\" radius=\"0.05\" height=\"0.01\" color=\"white\"\r\n                              physx-body=\"type: dynamic\">\r\n                    </a-cylinder>`\r\n      scene.insertAdjacentHTML(\"beforeend\", html)\r\n\r\n    }, 5000)\r\n  }\r\n})","/* global AFRAME, THREE */\r\nAFRAME.registerComponent('spawn-in-circle', {\r\n  schema: {\r\n    radius: {type: 'number', default: 1}\r\n  },\r\n\r\n  init: function() {\r\n    var el = this.el;\r\n    var center = el.getAttribute('position');\r\n\r\n    var angleRad = this.getRandomAngleInRadians();\r\n    var circlePoint = this.randomPointOnCircle(this.data.radius, angleRad);\r\n    var worldPoint = {x: circlePoint.x + center.x, y: center.y, z: circlePoint.y + center.z};\r\n    el.setAttribute('position', worldPoint);\r\n    // console.log('world point', worldPoint);\r\n\r\n    /*var angleDeg = angleRad * 180 / Math.PI;\r\n    var angleToCenter = -1 * angleDeg + 90;\r\n    angleRad = THREE.MathUtils.degToRad(angleToCenter);\r\n    el.object3D.rotation.set(0, angleRad, 0);*/\r\n    // console.log('angle deg', angleDeg);\r\n  },\r\n\r\n  getRandomAngleInRadians: function() {\r\n    return Math.random()*Math.PI*2;\r\n  },\r\n\r\n  randomPointOnCircle: function (radius, angleRad) {\r\n    var x = Math.cos(angleRad)*radius;\r\n    var y = Math.sin(angleRad)*radius;\r\n    return {x: x, y: y};\r\n  }\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('/src/display-room-key.js')\r\nrequire('/src/networking.js')\r\nrequire('/src/spawn-in-circle.js')\r\nrequire('/src/spawn-balls.js')\r\nrequire('/src/physx-grab.js')"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","registerComponent","init","this","el","setAttribute","ROOM_KEY","worldPosition","THREE","Vector3","targetWorldPosition","schema","target","type","grabProximity","default","holdTolerance","GRABBED_STATE","grabbing","grabTarget","physxEl","querySelector","onGripOpen","bind","onGripClose","play","addEventListener","pause","removeEventListener","evt","removeJoint","addJoint","joint","document","createElement","id","appendChild","parentElement","removeChild","tick","data","object3D","getWorldPosition","dist","sub","length","setTimeout","scene","sceneEl","insertAdjacentHTML","radius","center","getAttribute","angleRad","getRandomAngleInRadians","circlePoint","randomPointOnCircle","worldPoint","x","y","z","Math","random","PI","cos","sin","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}